include:
  - template: Security/SAST.gitlab-ci.yml

cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  JAVA_OPTS: -XX:MaxRAMPercentage=90 # для того, чтобы Maven не съел всю свободную оперативку

stages:
  - build
  - test
  - notify
  - release
  - deploy

cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository

build-backend-code-job:
  stage: build  
  # only:
  #   changes:
  #     - backend/**/*
  #   variables:
  #     - $CI_COMMIT_MESSAGE =~ /send notification/
  rules: # rules и only в данных случаях взаимозаменяемы
    - changes:
      - backend/**/*
  script:
    - cd backend
    - >
      mvn package -Dmaven.repo.local=${MAVEN_REPO_PATH}
      -Dversion.application=${VERSION}

  artifacts:
    paths:
      - backend/target/sausage-store-0.0.${VERSION}.jar
      - ${CI_PROJECT_DIR}/.m2/ 


spotbugs-sast:
  stage: test
  variables:
    COMPILE: "false"
    SAST_JAVA_VERSION: 16
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository

sonarqube-backend-sast:
  stage: test
  image: maven:3.8-openjdk-16
  script:
    - >
      mvn -f ${CI_PROJECT_DIR}/backend -X verify sonar:sonar 
      -Dsonar.projectName="$SONAR_PROJECT_KEY" 
      -Dsonar.projectKey=$SONAR_PROJECT_KEY_BACK 
      -Dsonar.host.url=$SONARQUBE_URL 
      -Dsonar.login=$SONAR_LOGIN  
      -Dsonar.qualitygate.wait=true
  needs:
    - build-backend-code-job

telegram-notification-backend:
  stage: notify
  only:
    changes:
    - backend/*
  script:
    - curl -s -X POST https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage 
      -d parse_mode=markdown
      -d chat_id=-1001771539978 
      -d text="std-022-024 собрал backend [artefact]($CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_SHA/download?job=build-backend-code-job)"
  needs:
    - build-backend-code-job

backend-upload-release:
  stage: release   
  needs:
    - build-backend-code-job
  script:
    - cd backend
    - >
      mvn deploy -DskipTests -s settings.xml
      -Dmaven.repo.local=${MAVEN_REPO_PATH}
      -Dversion.application=${VERSION}

deploy:
  stage: deploy
  before_script:
    #устанавливаем ssh-agent для удобства аутентификации по ssh
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    #сохраняем сгенеренный ранее приватный ключ для раннера
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
     #выполняем простую команду для проверки
     - ssh ${DEV_USER}@${DEV_HOST} "id" 
     - scp ./backend/sausage-store-backend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/sausage-store-backend.service
     - >
      ssh ${DEV_USER}@${DEV_HOST} 
      "export "CURRENT_VERSION=${VERSION}"; 
      export "VERSION=${VERSION}"; 
      export "DEV_HOST=${DEV_HOST}";
      export "NEXUS_REPO_URL=${NEXUS_REPO_URL}"; 
      export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; 
      export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}";
      setsid /bin/bash -s " < ./backend/deploy.sh
