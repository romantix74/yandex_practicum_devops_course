

cache:
  paths:
    - frontend/dist/frontend

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  # на замену VERSION
  FRONTEND_VERSION: 1.0.${CI_PIPELINE_ID}

stages:
  - build
  - notify
  - release
  - deploy

build-frontend-code-job:
  stage: build  
  only:
    changes:
      - frontend/*
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
  script:
    - echo "test"
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/frontend"
      --dockerfile "${CI_PROJECT_DIR}/frontend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/sausage-frontend:${FRONTEND_VERSION}"
      --build-arg FRONTEND_VERSION=$FRONTEND_VERSION
      --cache=true
  artifacts:
    paths:
      - frontend/dist/frontend


telegram-notification-frontend:
  stage: notify
  # only:
  #   changes:
  #   - frontend/*
  script:
    - curl -s -X POST https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage 
      -d parse_mode=markdown
      -d chat_id=-1001771539978 
      -d text="std-022-024 собрал frontend [artefact]($CI_PROJECT_URL/-/jobs/artifacts/${VERSION}/download?job=build-frontend-code-job)"
  needs:
    - build-frontend-code-job

release:
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ "" ]
  cache: [ ]
  stage: release
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/sausage-frontend:${FRONTEND_VERSION} latest

frontend-deploy:
  stage: deploy
  image: alpine:3.18
  before_script:
    - echo ${FRONTEND_VERSION}
    - apk add openssh-client bash docker-compose
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - docker context create --docker "host=ssh://student@std-022-24.praktikum-services.tech" remote
  script:
    - sleep 60   # чтобы backend успел подняться
    - docker context use remote
    # - >
    #   export FRONTEND_VERSION=${FRONTEND_VERSION}

    # - docker rm -f sausage-frontend || true
    - docker-compose --context remote up -d --force-recreate --no-deps frontend


  # before_script:
  #   - apk add openssh-client bash envsubst
  #   - eval $(ssh-agent -s)
  #   - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
  #   - mkdir -p ~/.ssh
  #   - chmod 700 ~/.ssh
  #   - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
  #   - chmod 644 ~/.ssh/known_hosts
  # script:
  #   - ssh ${DEV_USER}@${DEV_HOST} "mkdir -p /tmp/${CI_PROJECT_DIR}/frontend/"
  #   # - scp ./frontend/default.conf ${DEV_USER}@${DEV_HOST}:/tmp/${CI_PROJECT_DIR}/frontend/default.conf 
  #   - envsubst < ./frontend/deploy.sh|ssh ${DEV_USER}@${DEV_HOST} 
  # environment:
  #   name: $CI_COMMIT_REF_SLUG/frontend
  #   url: http://std-022-24.praktikum-services.tech/

